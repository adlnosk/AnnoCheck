configfile: "config_paths.yaml"
print(config['species'])

import yaml
import os

# Ensure SPEC is always a string
SPEC = config["species"] if isinstance(config["species"], list) else config["species"]

# Precompute haplotype numbers
species = config["species"]
SPECIES = list(config["species_data"].keys())  
HAPS_DICT = {sp: list(range(1, config["species_data"][sp]["nhaps"] + 1)) for sp in SPECIES}

    
def FASTA_INPUT(wildcards): # Generate paths by replacing $n with haplotype numbers
    fasta_template = config["species_data"][wildcards.species]["fastas_path"]
    return fasta_template.replace("$n", str(wildcards.n))

def get_reads(wildcards):
    return config["species_data"][wildcards.species]["reads"]

# taxonomy
def get_helixer_lineage(wildcards):
    return config["species_data"][wildcards.species]["helixer_lineage"]
def get_busco_lineage(wildcards):
    return config["species_data"][wildcards.species]["busco_lineage"]
def get_egapx_taxid(wildcards):
    return config["species_data"][wildcards.species]["egapx_taxid"]

# get dir structure
PWD = os.getcwd()
results_dir = PWD + "/../results/{species}"

include: 'snakepit/launch_annotations.smk'
include: 'snakepit/quality_check_raw.smk'

rule all:
    input:
        [
            expand(results_dir + path, n=HAPS_DICT.get(species, []), species=species, dataset=["egapx", "helixer"])
            for species in config["species"]
            for path in [
              # annotation files
                "/hap{n}.checked.fasta",
                "/helixer/hap_{n}.gff3",
                "/egapx/hap_{n}/output/complete.genomic.gtf",
                "/repeatmasker/hap{n}/hap{n}.checked.masked.fasta",
                "/infernal_rfam/hap_{n}.deoverlapped.checked.gff",
                "/tRNAscan/hap_{n}.gff3",
                "/RNAmmer/hap_{n}.gff3",
              # quality checks raw
                "/{dataset}/COMPL_hap{n}_summary.txt",
                "/{dataset}/combined_psauron_scores.csv",
                "/{dataset}/OMArk/hap{n}/hap{n}.png"
            ]
        ]


